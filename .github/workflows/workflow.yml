name: Build, release, push firmware

permissions:
  contents: write
  
on:
  workflow_dispatch:
  push:
    tags:
      - '*' # Push events to matching *, any

jobs:
  build_release_push:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install Node JS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio==6.1.11

      - name: Build PlatformIO Project
        run: pio run

      - name: Get Release Version
        id: get_version
        shell: bash
        run: |
          value=$(grep '#define VERSION' src/version.h | awk -F '"' '{print $2}')
          echo "version=$value" >> $GITHUB_OUTPUT

      - name: Get last commit message
        id: get_commit_message
        run: |
          currentTag=${GITHUB_REF#refs/tags/}
          badgeText="![GitHub Downloads](https://img.shields.io/github/downloads/xyzroe/XZG/${currentTag}/total)\n\n"
          echo "Debug: ${badgeText}"
          commitMessage=$(git log -1 --pretty=%B | tail -n +2)
          echo "Debug: ${commitMessage}"
          fullCommitMessage="$badgeText$commitMessage"
          echo "Debug: ${fullCommitMessage}"
          echo "releaseMessage<<EOF" >> $GITHUB_ENV
          echo "$fullCommitMessage" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Calculate SHA-256 hash of the firmware
        id: sha256_hash
        run: |
          echo "sha256=$(sha256sum bin/XZG_${{ steps.get_version.outputs.version }}.full.bin | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Get size of the firmware
        id: firmware_size
        run: |
          echo "size=$(stat -c %s bin/XZG_${{ steps.get_version.outputs.version }}.full.bin)" >> $GITHUB_OUTPUT

      - name: Create manifest.json for ESP Web Tools
        run: |
          cat << EOF > manifest.json
          {
            "name": "XZG Firmware",
            "version": "${{ steps.get_version.outputs.version }}",
            "builds": [
              {
                "chipFamily": "ESP32",
                "improv": false,
                "parts": [
                  {
                    "path": "https://raw.githubusercontent.com/${{ github.repository }}/releases/${{ steps.get_version.outputs.version }}/XZG_${{ steps.get_version.outputs.version }}.full.bin",
                    "offset": 0
                  }
                ]
              }
            ]
          }
          EOF
          echo "Manifest file created."

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: false
          name: "${{ steps.get_version.outputs.version }}"
          body: ${{ env.releaseMessage }}
          files: |
            bin/XZG_${{ steps.get_version.outputs.version }}.ota.bin
            bin/XZG_${{ steps.get_version.outputs.version }}.full.bin

      - name: Setup Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Checkout releases branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and checkout releases branch if not exists
        run: |
          if ! git rev-parse --verify --quiet origin/releases; then
            git checkout --orphan releases
            git reset --hard
            git commit --allow-empty -m "Initial commit for releases branch"
            git push origin releases
          else
            git checkout releases
          fi
        working-directory: ./releases

      - name: Copy files to releases branch
        run: |
          mkdir -p releases/${{ steps.get_version.outputs.version }}
          cp bin/XZG_${{ steps.get_version.outputs.version }}.full.bin releases/${{ steps.get_version.outputs.version }}/
          cp manifest.json releases/${{ steps.get_version.outputs.version }}/
          echo "Files copied to releases branch."

      - name: Commit and push files to releases branch
        run: |
          cd releases
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ steps.get_version.outputs.version }}
          git commit -m "Add firmware and manifest for version ${{ steps.get_version.outputs.version }}"
          git push

